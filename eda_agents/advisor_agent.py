import os
from langchain_google_genai import ChatGoogleGenerativeAI

class AdvisorAgent:
    """
    Agente responsÃ¡vel por gerar resumos gerais, recomendaÃ§Ãµes,
    conclusÃµes e perguntas sugeridas com base nas anÃ¡lises.
    Usa Gemini (modelo definido no .env).
    """

    def __init__(self, gemini_api_key):
        model_name = os.getenv("GEMINI_MODEL", "gemini-2.0-flash-exp")
        self.llm = ChatGoogleGenerativeAI(
            model=model_name,
            temperature=0.2,
            google_api_key=gemini_api_key
        )

    def summarize(self, last_answer):
        """
        Gera resumo, recomendaÃ§Ãµes e SEMPRE inclui perguntas sugeridas.
        """
        if not last_answer or "result" not in last_answer:
            return {
                "title": "ğŸ“Œ Resumo Geral e RecomendaÃ§Ãµes",
                "type": "text",
                "content": (
                    "Nenhuma anÃ¡lise disponÃ­vel ainda.\n\n"
                    "Perguntas sugeridas:\n"
                    "- Quais variÃ¡veis apresentam maior variabilidade?\n"
                    "- Existem correlaÃ§Ãµes fortes entre variÃ¡veis numÃ©ricas?\n"
                    "- Quais categorias aparecem com mais frequÃªncia?"
                )
            }

        agent_name = last_answer.get("agent", "Agente desconhecido")
        blocks = last_answer["result"]

        prompt = f"""
        VocÃª Ã© um assistente de anÃ¡lise exploratÃ³ria de dados.
        Baseado no resultado produzido pelo agente {agent_name}:

        {blocks}

        Gere:
        - Um resumo claro e curto (3 a 5 frases).
        - Entre 2 e 3 recomendaÃ§Ãµes prÃ¡ticas para prÃ³ximos passos.
        - 3 perguntas que o usuÃ¡rio pode fazer a seguir para entender melhor os dados.
        Sempre inclua a seÃ§Ã£o "Perguntas sugeridas:" no final.
        """

        try:
            commentary = self.llm.invoke(prompt).content.strip()
        except Exception:
            commentary = (
                "Resumo automÃ¡tico indisponÃ­vel.\n\n"
                "RecomendaÃ§Ãµes:\n"
                "- Continue explorando distribuiÃ§Ãµes e correlaÃ§Ãµes.\n"
                "- Analise outliers para identificar padrÃµes atÃ­picos.\n"
                "- Valide se existem valores ausentes relevantes.\n\n"
                "Perguntas sugeridas:\n"
                "- Quais variÃ¡veis apresentam maior variabilidade?\n"
                "- Existem correlaÃ§Ãµes fortes entre variÃ¡veis numÃ©ricas?\n"
                "- Quais categorias aparecem com mais frequÃªncia?"
            )

        # Garantia de que sempre existam perguntas sugeridas
        if "Perguntas sugeridas:" not in commentary:
            commentary += (
                "\n\nPerguntas sugeridas:\n"
                "- Quais variÃ¡veis apresentam maior variabilidade?\n"
                "- Existem correlaÃ§Ãµes fortes entre variÃ¡veis numÃ©ricas?\n"
                "- Quais categorias aparecem com mais frequÃªncia?"
            )

        return {
            "title": "ğŸ“Œ Resumo Geral, RecomendaÃ§Ãµes e Perguntas Sugeridas",
            "type": "text",
            "content": commentary
        }

    def summarize_history(self, history):
        """
        Gera conclusÃµes gerais com base no histÃ³rico de perguntas e respostas.
        """
        if not history:
            return {
                "title": "ğŸ“Œ ConclusÃµes Gerais",
                "type": "text",
                "content": (
                    "Ainda nÃ£o foram feitas anÃ¡lises suficientes para gerar conclusÃµes.\n\n"
                    "Perguntas sugeridas:\n"
                    "- Qual tendÃªncia geral pode ser observada nos dados jÃ¡ analisados?\n"
                    "- Existem padrÃµes repetidos ao longo do tempo?\n"
                    "- Quais insights podem ser aprofundados com novas anÃ¡lises?"
                )
            }

        hist_text = "\n".join([f"Pergunta: {q}\nResposta: {a}" for q, a, _ in history])

        prompt = f"""
        VocÃª Ã© um assistente de anÃ¡lise de dados.
        Aqui estÃ£o as perguntas e respostas anteriores do usuÃ¡rio:

        {hist_text}

        Com base nisso, escreva:
        - 3 a 5 conclusÃµes objetivas jÃ¡ obtidas dos dados.
        - 2 recomendaÃ§Ãµes prÃ¡ticas de prÃ³ximos passos para anÃ¡lise.
        - 3 perguntas sugeridas para aprofundar a exploraÃ§Ã£o dos dados.
        """

        try:
            resp = self.llm.invoke(prompt)
            content = resp.content.strip()
        except Exception as e:
            content = (
                f"Erro ao gerar conclusÃµes: {e}\n\n"
                "ConclusÃµes preliminares nÃ£o disponÃ­veis.\n\n"
                "Perguntas sugeridas:\n"
                "- Existe alguma variÃ¡vel com tendÃªncia temporal?\n"
                "- Quais relaÃ§Ãµes ainda nÃ£o foram exploradas?\n"
                "- Onde podem existir inconsistÃªncias nos dados?"
            )

        if "Perguntas sugeridas:" not in content:
            content += (
                "\n\nPerguntas sugeridas:\n"
                "- Existe alguma variÃ¡vel com tendÃªncia temporal?\n"
                "- Quais relaÃ§Ãµes ainda nÃ£o foram exploradas?\n"
                "- Onde podem existir inconsistÃªncias nos dados?"
            )

        return {
            "title": "ğŸ“Œ ConclusÃµes Gerais",
            "type": "text",
            "content": content
        }
