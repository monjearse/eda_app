import os
import plotly.express as px
from langchain_google_genai import ChatGoogleGenerativeAI

class VisualizerAgent:
    """
    Agente respons√°vel por gerar representa√ß√µes gr√°ficas dos dados:
    - histogramas, boxplots, barras e pizzas.
    Sempre prioriza o uso do LLM (Gemini) para interpreta√ß√£o textual,
    com fallback local quando o modelo n√£o est√° dispon√≠vel.
    """

    def __init__(self, dfs, gemini_api_key):
        self.dfs = dfs
        model_name = os.getenv("GEMINI_MODEL", "gemini-2.0-flash-exp")
        self.llm = ChatGoogleGenerativeAI(
            model=model_name,
            temperature=0.2,
            google_api_key=gemini_api_key
        )

    # ============================================================
    # üîπ HISTOGRAMAS
    # ============================================================
    def histograms(self):
        results = []
        for name, df in self.dfs.items():
            numeric_cols = df.select_dtypes(include="number").columns

            # Gr√°ficos locais
            for col in numeric_cols:
                try:
                    fig = px.histogram(df, x=col, title=f"Distribui√ß√£o de {col} ‚Äî {name}")
                    results.append({
                        "title": f"üìà Distribui√ß√£o ‚Äî {col} ({name})",
                        "type": "chart",
                        "content": fig
                    })
                except Exception:
                    continue

            # Interpreta√ß√£o autom√°tica via LLM
            try:
                prompt = (
                    f"Voc√™ √© um analista de dados. Analise os histogramas das vari√°veis num√©ricas "
                    f"do dataset '{name}' e descreva brevemente padr√µes vis√≠veis: assimetrias, "
                    f"dispers√µes e concentra√ß√µes. Dados de apoio: {df.describe(include='number').to_dict()}."
                )
                commentary = self.llm.invoke(prompt).content
            except Exception:
                commentary = (
                    "Resumo autom√°tico indispon√≠vel. "
                    "Sugest√£o: observe os histogramas para identificar distribui√ß√µes assim√©tricas "
                    "e picos de frequ√™ncia, que indicam concentra√ß√£o de valores ou outliers."
                )

            results.append({
                "title": f"üß† Interpreta√ß√£o Autom√°tica ‚Äî {name}",
                "type": "text",
                "content": commentary
            })

        return results

    # ============================================================
    # üîπ BOXPLOTS
    # ============================================================
    def boxplots(self):
        """Gera boxplots para vari√°veis num√©ricas com interpreta√ß√£o autom√°tica via LLM."""
        results = []
        for name, df in self.dfs.items():
            numeric_cols = df.select_dtypes(include="number").columns

            # Gera√ß√£o dos gr√°ficos
            for col in numeric_cols:
                try:
                    fig = px.box(df, y=col, title=f"Boxplot de {col} ‚Äî {name}")
                    results.append({
                        "title": f"üìä Boxplot ‚Äî {col} ({name})",
                        "type": "chart",
                        "content": fig
                    })
                except Exception:
                    continue

            # Interpreta√ß√£o com LLM priorit√°rio
            try:
                prompt = (
                    f"Analise os boxplots das vari√°veis num√©ricas do dataset '{name}'. "
                    f"Explique em linguagem natural quais vari√°veis apresentam maior dispers√£o, "
                    f"assimetria ou outliers significativos. Use um tom anal√≠tico e direto. "
                    f"Dados estat√≠sticos: {df.describe(include='number').to_dict()}."
                )
                commentary = self.llm.invoke(prompt).content
            except Exception:
                commentary = (
                    "Resumo autom√°tico indispon√≠vel. "
                    "Sugest√£o: observe vari√°veis com grande dispers√£o nos boxplots ‚Äî "
                    "elas indicam variabilidade alta ou presen√ßa de outliers."
                )

            results.append({
                "title": f"üß† Interpreta√ß√£o Autom√°tica ‚Äî {name}",
                "type": "text",
                "content": commentary
            })

        return results

    # ============================================================
    # üîπ GR√ÅFICOS DE BARRAS
    # ============================================================
    def barplots(self):
        """Gera gr√°ficos de barras para vari√°veis categ√≥ricas com interpreta√ß√£o autom√°tica via LLM."""
        results = []
        for name, df in self.dfs.items():
            cat_cols = df.select_dtypes(exclude="number").columns

            for col in cat_cols:
                try:
                    top_cat = df[col].value_counts().reset_index().head(10)
                    top_cat.columns = [col, "Frequ√™ncia"]
                    fig = px.bar(top_cat, x=col, y="Frequ√™ncia", title=f"Top categorias ‚Äî {col} ({name})")
                    results.append({
                        "title": f"üìä Categorias mais frequentes ‚Äî {col} ({name})",
                        "type": "chart",
                        "content": fig
                    })
                except Exception:
                    continue

            # LLM interpreta√ß√£o
            try:
                prompt = (
                    f"Analise as distribui√ß√µes categ√≥ricas do dataset '{name}'. "
                    f"Identifique categorias dominantes, raras e poss√≠veis desequil√≠brios "
                    f"de frequ√™ncia. Dados de apoio: {df.describe(include='object').to_dict()}."
                )
                commentary = self.llm.invoke(prompt).content
            except Exception:
                commentary = (
                    "Resumo autom√°tico indispon√≠vel. "
                    "Sugest√£o: observe categorias dominantes e pouco representadas ‚Äî "
                    "elas indicam concentra√ß√£o de registros ou casos raros."
                )

            results.append({
                "title": f"üß† Interpreta√ß√£o Autom√°tica ‚Äî {name}",
                "type": "text",
                "content": commentary
            })

        return results

    # ============================================================
    # üîπ GR√ÅFICOS DE PIZZA
    # ============================================================
    def piecharts(self):
        """Gera gr√°ficos de pizza para vari√°veis categ√≥ricas com poucas categorias (<=6)."""
        results = []
        for name, df in self.dfs.items():
            cat_cols = df.select_dtypes(exclude="number").columns
            for col in cat_cols:
                try:
                    counts = df[col].value_counts()
                    if 2 <= len(counts) <= 6:
                        fig = px.pie(values=counts.values, names=counts.index,
                                     title=f"Distribui√ß√£o de {col} ({name})")
                        results.append({
                            "title": f"ü•ß Distribui√ß√£o (pizza) ‚Äî {col} ({name})",
                            "type": "chart",
                            "content": fig
                        })
                except Exception:
                    continue

            # Interpreta√ß√£o autom√°tica
            try:
                prompt = (
                    f"Analise os gr√°ficos de pizza do dataset '{name}'. "
                    f"Explique brevemente o equil√≠brio entre categorias, e destaque se h√° predomin√¢ncia "
                    f"de alguma delas. Dados categ√≥ricos: {df.describe(include='object').to_dict()}."
                )
                commentary = self.llm.invoke(prompt).content
            except Exception:
                commentary = (
                    "Resumo autom√°tico indispon√≠vel. "
                    "Sugest√£o: observe gr√°ficos com categorias dominantes ‚Äî "
                    "elas podem indicar concentra√ß√£o de casos ou vi√©s de amostragem."
                )

            results.append({
                "title": f"üß† Interpreta√ß√£o Autom√°tica ‚Äî {name}",
                "type": "text",
                "content": commentary
            })

        return results
